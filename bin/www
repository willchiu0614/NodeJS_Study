#!/usr/bin/env node

/* Module dependencies.*/
var app = require('../Server');
var debug = require('debug')('test:server');
require("dotenv/config");
var http = require('http');
const mongoose = require('mongoose');

/* Get port from environment and store in Express.*/
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/*MongoDB*/
// mongoose.connect('mongodb://localhost:27017/users', {
//     useNewUrlParser: true, 
//     useUnifiedTopology: true
// }).then(() => console.log('\x1b[33m', '[MongoDB Connected] '))
// .catch(err => console.log(err));

mongoose.connect('mongodb+srv://willchou0614:will15215@cluster0.yo0ig0d.mongodb.net/userDB?retryWrites=true&w=majority', {
    useNewUrlParser: true, 
    useUnifiedTopology: true
}).then(() => console.log('\x1b[33m', '[MongoDB Connected] '))
.catch(err => console.log(err));
// mongodb+srv://willchou0614:<password>@cluster0.yo0ig0d.mongodb.net/?retryWrites=true&w=majority

/*Create HTTP server.*/
var server = http.createServer(app, function (req, res) {
  // http.createServer(function (req, res) {
  res.writeHead(200);
  
  // res.writeHead(200, { 'Location': 'http://' + req.headers['host'] + req.url });
  res.end();
})

/*Listen on provided port, on all network interfaces.*/
server.listen(port, function () {
  console.log("------------------------------------------------");
  console.log("[SERVER] RUNNING WEB SEERVER IN " + app.get('port') + ' PORT...');
  console.log("------------------------------------------------");
});

server.on('error', onError);
server.on('listening', onListening);

/*Normalize a port into a number, string, or false.*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*Event listener for HTTP server "error" event.*/
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/*Event listener for HTTP server "listening" event.*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
